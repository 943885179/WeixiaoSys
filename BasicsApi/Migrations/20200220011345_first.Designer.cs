// <auto-generated />
using System;
using BasicsApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BasicsApi.Migrations
{
    [DbContext(typeof(WeixiaoSysContext))]
    [Migration("20200220011345_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BasicsApi.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnName("district")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Level")
                        .HasColumnName("level")
                        .HasColumnType("int");

                    b.Property<int?>("Pid")
                        .HasColumnName("pid")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_AREA")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Pid");

                    b.ToTable("area");
                });

            modelBuilder.Entity("BasicsApi.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Area")
                        .HasColumnName("area")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("Briefing")
                        .HasColumnName("briefing")
                        .HasColumnType("varchar(2000)")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("Idcard")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<bool?>("Isdel")
                        .HasColumnName("isdel")
                        .HasColumnType("bit");

                    b.Property<string>("LegalPerson")
                        .IsRequired()
                        .HasColumnName("legal_person")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("Pid")
                        .HasColumnName("pid")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_COMPANY")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Pid");

                    b.ToTable("company");
                });

            modelBuilder.Entity("BasicsApi.Models.CompanyLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cid")
                        .HasColumnName("cid")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PK_COMPANY_LOG")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Cid");

                    b.ToTable("company_log");

                    b.HasComment("公司变动表");
                });

            modelBuilder.Entity("BasicsApi.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnName("company_id")
                        .HasColumnType("int");

                    b.Property<string>("DepCode")
                        .IsRequired()
                        .HasColumnName("dep_code")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("DepName")
                        .IsRequired()
                        .HasColumnName("dep_name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Isdel")
                        .HasColumnName("isdel")
                        .HasColumnType("bit");

                    b.Property<int?>("Pid")
                        .HasColumnName("pid")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_DEPARTMENT")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CompanyId");

                    b.HasIndex("Pid");

                    b.ToTable("department");
                });

            modelBuilder.Entity("BasicsApi.Models.Element", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<int?>("OperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("operation_id")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("PK_ELEMENT")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OperationId");

                    b.HasIndex("Type");

                    b.ToTable("element");

                    b.HasComment("页面元素表");
                });

            modelBuilder.Entity("BasicsApi.Models.ElementElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CelementId")
                        .HasColumnName("celement_id")
                        .HasColumnType("int");

                    b.Property<int>("PelementId")
                        .HasColumnName("pelement_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ELEMENT_ELEMENT")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CelementId");

                    b.HasIndex("PelementId");

                    b.ToTable("element_element");

                    b.HasComment("元素嵌套表");
                });

            modelBuilder.Entity("BasicsApi.Models.ElementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("PK_ELEMENT_TYPE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("element_type");

                    b.HasComment("元素类型表");
                });

            modelBuilder.Entity("BasicsApi.Models.EmpGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnName("group_name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("PK_EMP_GROUP")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("emp_group");

                    b.HasComment("用户组");
                });

            modelBuilder.Entity("BasicsApi.Models.EmpRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmpId")
                        .HasColumnName("emp_id")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_EMP_ROLE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EmpId");

                    b.HasIndex("RoleId");

                    b.ToTable("emp_role");
                });

            modelBuilder.Entity("BasicsApi.Models.EmployePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmpId")
                        .HasColumnName("emp_id")
                        .HasColumnType("int");

                    b.Property<int>("PosId")
                        .HasColumnName("pos_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_EMPLOYE_POSITION")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EmpId");

                    b.HasIndex("PosId");

                    b.ToTable("employe_position");
                });

            modelBuilder.Entity("BasicsApi.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepId")
                        .HasColumnName("dep_id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Enddate")
                        .HasColumnName("enddate")
                        .HasColumnType("date");

                    b.Property<string>("Idcard")
                        .IsRequired()
                        .HasColumnName("idcard")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Img")
                        .HasColumnName("img")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<bool?>("Isuse")
                        .HasColumnName("isuse")
                        .HasColumnType("bit");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasColumnName("login_name")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("LoginPwd")
                        .IsRequired()
                        .HasColumnName("login_pwd")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("Qq")
                        .HasColumnName("qq")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .HasColumnName("sex")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<DateTime>("Stardate")
                        .HasColumnName("stardate")
                        .HasColumnType("date");

                    b.Property<string>("Wechar")
                        .HasColumnName("wechar")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("PK_EMPLOYEE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("DepId");

                    b.ToTable("employee");

                    b.HasComment("员工表");
                });

            modelBuilder.Entity("BasicsApi.Models.Files", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("file_name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnName("file_path")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("PK_FILES")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("files");

                    b.HasComment("文件表");
                });

            modelBuilder.Entity("BasicsApi.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acl")
                        .HasColumnName("acl")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Badge")
                        .HasColumnName("badge")
                        .HasColumnType("int");

                    b.Property<string>("BadgeDot")
                        .HasColumnName("badgeDot")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BadgeStatus")
                        .HasColumnName("badgeStatus")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Disabled")
                        .HasColumnName("disabled")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalLink")
                        .HasColumnName("externalLink")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<bool?>("Hide")
                        .HasColumnName("hide")
                        .HasColumnType("bit");

                    b.Property<string>("HideInBreadcrumb")
                        .HasColumnName("hideInBreadcrumb")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("I18n")
                        .HasColumnName("i18n")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Link")
                        .HasColumnName("link")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PageId")
                        .HasColumnName("pageId")
                        .HasColumnType("int");

                    b.Property<int?>("Pagepageid")
                        .HasColumnName("pagepageid")
                        .HasColumnType("int");

                    b.Property<int?>("Pid")
                        .HasColumnName("pid")
                        .HasColumnType("int");

                    b.Property<string>("Reuse")
                        .HasColumnName("reuse")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Shortcut")
                        .HasColumnName("shortcut")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ShortcutRoot")
                        .HasColumnName("shortcutRoot")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Target")
                        .HasColumnName("target")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("PK_MENU")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PageId");

                    b.HasIndex("Pagepageid");

                    b.HasIndex("Pid");

                    b.ToTable("menu");

                    b.HasComment("菜单表");
                });

            modelBuilder.Entity("BasicsApi.Models.Operation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<int>("Pid")
                        .HasColumnName("pid")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_OPERATION")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("operation");

                    b.HasComment("功能操作表");
                });

            modelBuilder.Entity("BasicsApi.Models.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("PK_PAGE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("page");

                    b.HasComment("页面元素表");
                });

            modelBuilder.Entity("BasicsApi.Models.PageElement", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("ElementId")
                        .HasColumnName("element_id")
                        .HasColumnType("int");

                    b.Property<int?>("PagId")
                        .HasColumnName("pag_id")
                        .HasColumnType("int");

                    b.Property<int>("PageId")
                        .HasColumnName("page_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_PAGE_ELEMENT")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PagId");

                    b.ToTable("page_element");

                    b.HasComment("页面元素对照表");
                });

            modelBuilder.Entity("BasicsApi.Models.PageElements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ElementsId")
                        .HasColumnName("elements_id")
                        .HasColumnType("int");

                    b.Property<int>("PageId")
                        .HasColumnName("page_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_PAGE_ELEMENTS")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ElementsId");

                    b.HasIndex("PageId");

                    b.ToTable("page_elements");

                    b.HasComment("元素嵌套与页面对照表");
                });

            modelBuilder.Entity("BasicsApi.Models.PagePage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CpageId")
                        .HasColumnName("cpage_id")
                        .HasColumnType("int");

                    b.Property<int>("PpageId")
                        .HasColumnName("ppage_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_PAGE_PAGE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CpageId");

                    b.HasIndex("PpageId");

                    b.ToTable("page_page");

                    b.HasComment("页面嵌套表");
                });

            modelBuilder.Entity("BasicsApi.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Describes")
                        .HasColumnName("describes")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("PK_POSITION")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("position");
                });

            modelBuilder.Entity("BasicsApi.Models.Power", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("PK_POWER")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("power");
                });

            modelBuilder.Entity("BasicsApi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("PK_ROLE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("role");
                });

            modelBuilder.Entity("BasicsApi.Models.RoleElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ElementId")
                        .HasColumnName("element_id")
                        .HasColumnType("int");

                    b.Property<int>("PowerId")
                        .HasColumnName("power_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ROLE_ELEMENT")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ElementId");

                    b.HasIndex("PowerId");

                    b.ToTable("role_element");

                    b.HasComment("页面元素权限对照表");
                });

            modelBuilder.Entity("BasicsApi.Models.RoleFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FileId")
                        .HasColumnName("file_id")
                        .HasColumnType("int");

                    b.Property<int>("PowerId")
                        .HasColumnName("power_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ROLE_FILE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("FileId");

                    b.ToTable("role_file");

                    b.HasComment("文件权限对照表");
                });

            modelBuilder.Entity("BasicsApi.Models.RoleMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenuId")
                        .HasColumnName("menu_id")
                        .HasColumnType("int");

                    b.Property<int>("PowerId")
                        .HasColumnName("power_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ROLE_MENU")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("MenuId");

                    b.HasIndex("PowerId");

                    b.ToTable("role_menu");

                    b.HasComment("菜单权限对照表");
                });

            modelBuilder.Entity("BasicsApi.Models.RoleOpretion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OpeId")
                        .HasColumnName("ope_id")
                        .HasColumnType("int");

                    b.Property<int>("PowerId")
                        .HasColumnName("power_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ROLE_OPRETION")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OpeId");

                    b.HasIndex("PowerId");

                    b.ToTable("role_opretion");

                    b.HasComment("功能权限对照表");
                });

            modelBuilder.Entity("BasicsApi.Models.RolePage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PageId")
                        .HasColumnName("page_id")
                        .HasColumnType("int");

                    b.Property<int>("PowerId")
                        .HasColumnName("power_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ROLE_PAGE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PageId");

                    b.HasIndex("PowerId");

                    b.ToTable("role_page");

                    b.HasComment("页面权限对照表");
                });

            modelBuilder.Entity("BasicsApi.Models.RolePower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PowerId")
                        .HasColumnName("power_id")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ROLE_POWER")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PowerId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_power");

                    b.HasComment("角色权限表");
                });

            modelBuilder.Entity("BasicsApi.Models.Shareholder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Cid")
                        .HasColumnName("cid")
                        .HasColumnType("int");

                    b.Property<string>("Idcard")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<decimal>("PayMoney")
                        .HasColumnName("pay_money")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("Proportion")
                        .HasColumnName("proportion")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("PK_SHAREHOLDER")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Cid");

                    b.ToTable("shareholder");

                    b.HasComment("股东表");
                });

            modelBuilder.Entity("BasicsApi.Models.UserUsergroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmpId")
                        .HasColumnName("emp_id")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_USER_USERGROUP")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EmpId");

                    b.HasIndex("GroupId");

                    b.ToTable("user_usergroup");

                    b.HasComment("用户组用户对照表");
                });

            modelBuilder.Entity("BasicsApi.Models.UsergroupRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_USERGROUP_ROLE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("usergroup_role");
                });

            modelBuilder.Entity("BasicsApi.Models.Area", b =>
                {
                    b.HasOne("BasicsApi.Models.Area", "P")
                        .WithMany("Children")
                        .HasForeignKey("Pid")
                        .HasConstraintName("FK_AREA_AREA_AREA_AREA");
                });

            modelBuilder.Entity("BasicsApi.Models.Company", b =>
                {
                    b.HasOne("BasicsApi.Models.Company", "P")
                        .WithMany("Children")
                        .HasForeignKey("Pid")
                        .HasConstraintName("FK_COMPANY_COM_COM_COMPANY");
                });

            modelBuilder.Entity("BasicsApi.Models.CompanyLog", b =>
                {
                    b.HasOne("BasicsApi.Models.Company", "C")
                        .WithMany("CompanyLog")
                        .HasForeignKey("Cid")
                        .HasConstraintName("FK_COMPANY__COM_COMLO_COMPANY")
                        .IsRequired();
                });

            modelBuilder.Entity("BasicsApi.Models.Department", b =>
                {
                    b.HasOne("BasicsApi.Models.Company", "Company")
                        .WithMany("Department")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_DEPARTME_DEP_COMPA_COMPANY")
                        .IsRequired();

                    b.HasOne("BasicsApi.Models.Department", "P")
                        .WithMany("Children")
                        .HasForeignKey("Pid")
                        .HasConstraintName("FK_DEPARTME_DEP_DEP_DEPARTME");
                });

            modelBuilder.Entity("BasicsApi.Models.Element", b =>
                {
                    b.HasOne("BasicsApi.Models.Operation", "Operation")
                        .WithMany("Element")
                        .HasForeignKey("OperationId")
                        .HasConstraintName("FK_ELEMENT_OPERATION_OPERATIO");

                    b.HasOne("BasicsApi.Models.ElementType", "TypeNavigation")
                        .WithMany("Element")
                        .HasForeignKey("Type")
                        .HasConstraintName("FK_ELEMENT_ELEMENT_E_ELEMENT_")
                        .IsRequired();
                });

            modelBuilder.Entity("BasicsApi.Models.ElementElement", b =>
                {
                    b.HasOne("BasicsApi.Models.Element", "Celement")
                        .WithMany("ElementElementCelement")
                        .HasForeignKey("CelementId")
                        .HasConstraintName("FK_ELEMENT__CELEMENT__ELEMENT")
                        .IsRequired();

                    b.HasOne("BasicsApi.Models.Element", "Pelement")
                        .WithMany("ElementElementPelement")
                        .HasForeignKey("PelementId")
                        .HasConstraintName("FK_ELEMENT__PELEMENT__ELEMENT")
                        .IsRequired();
                });

            modelBuilder.Entity("BasicsApi.Models.EmpRole", b =>
                {
                    b.HasOne("BasicsApi.Models.Employee", "Emp")
                        .WithMany("EmpRole")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_EMP_ROLE_EMP_EMPRO_EMPLOYEE")
                        .IsRequired();

                    b.HasOne("BasicsApi.Models.Role", "Role")
                        .WithMany("EmpRole")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_EMP_ROLE_ROLE_EMPR_ROLE")
                        .IsRequired();
                });

            modelBuilder.Entity("BasicsApi.Models.EmployePosition", b =>
                {
                    b.HasOne("BasicsApi.Models.Employee", "Emp")
                        .WithMany("EmployePosition")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_EMPLOYE__EMP_EMPPO_EMPLOYEE")
                        .IsRequired();

                    b.HasOne("BasicsApi.Models.Position", "Pos")
                        .WithMany("EmployePosition")
                        .HasForeignKey("PosId")
                        .HasConstraintName("FK_EMPLOYE__POS_EMPPO_POSITION")
                        .IsRequired();
                });

            modelBuilder.Entity("BasicsApi.Models.Employee", b =>
                {
                    b.HasOne("BasicsApi.Models.Department", "Dep")
                        .WithMany("Employee")
                        .HasForeignKey("DepId")
                        .HasConstraintName("FK_EMPLOYEE_USER_DEP_DEPARTME")
                        .IsRequired();
                });

            modelBuilder.Entity("BasicsApi.Models.Menu", b =>
                {
                    b.HasOne("BasicsApi.Models.Page", "Page")
                        .WithMany("Menu")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_MENU_PAGE_MENU_PAGE");

                    b.HasOne("BasicsApi.Models.PagePage", "Pagepage")
                        .WithMany("Menu")
                        .HasForeignKey("Pagepageid")
                        .HasConstraintName("FK_MENU_PAGES_MEN_PAGE_PAG");

                    b.HasOne("BasicsApi.Models.Menu", "P")
                        .WithMany("Children")
                        .HasForeignKey("Pid")
                        .HasConstraintName("FK_MENU_MENU_MENU_MENU");
                });

            modelBuilder.Entity("BasicsApi.Models.PageElement", b =>
                {
                    b.HasOne("BasicsApi.Models.Element", "IdNavigation")
                        .WithOne("PageElement")
                        .HasForeignKey("BasicsApi.Models.PageElement", "Id")
                        .HasConstraintName("FK_PAGE_ELE_REFERENCE_ELEMENT")
                        .IsRequired();

                    b.HasOne("BasicsApi.Models.Page", "Pag")
                        .WithMany("PageElement")
                        .HasForeignKey("PagId")
                        .HasConstraintName("FK_PAGE_ELE_REFERENCE_PAGE");
                });

            modelBuilder.Entity("BasicsApi.Models.PageElements", b =>
                {
                    b.HasOne("BasicsApi.Models.ElementElement", "Elements")
                        .WithMany("PageElements")
                        .HasForeignKey("ElementsId")
                        .HasConstraintName("FK_PAGE_ELE_PAGEELEME_ELEMENT_")
                        .IsRequired();

                    b.HasOne("BasicsApi.Models.Page", "Page")
                        .WithMany("PageElements")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_PAGE_ELE_PAGEELEME_PAGE")
                        .IsRequired();
                });

            modelBuilder.Entity("BasicsApi.Models.PagePage", b =>
                {
                    b.HasOne("BasicsApi.Models.Page", "Cpage")
                        .WithMany("PagePageCpage")
                        .HasForeignKey("CpageId")
                        .HasConstraintName("FK_PAGE_PAG_CPAGE_PAG_PAGE")
                        .IsRequired();

                    b.HasOne("BasicsApi.Models.Page", "Ppage")
                        .WithMany("PagePagePpage")
                        .HasForeignKey("PpageId")
                        .HasConstraintName("FK_PAGE_PAG_PPAGE_PAG_PAGE")
                        .IsRequired();
                });

            modelBuilder.Entity("BasicsApi.Models.RoleElement", b =>
                {
                    b.HasOne("BasicsApi.Models.Element", "Element")
                        .WithMany("RoleElement")
                        .HasForeignKey("ElementId")
                        .HasConstraintName("FK_ROLE_ELE_ELEMENT_E_ELEMENT")
                        .IsRequired();

                    b.HasOne("BasicsApi.Models.Power", "Power")
                        .WithMany("RoleElement")
                        .HasForeignKey("PowerId")
                        .HasConstraintName("FK_ROLE_ELE_ROLE_ELEM_POWER")
                        .IsRequired();
                });

            modelBuilder.Entity("BasicsApi.Models.RoleFile", b =>
                {
                    b.HasOne("BasicsApi.Models.Files", "File")
                        .WithMany("RoleFile")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_ROLE_FIL_FILE_FILE_FILES")
                        .IsRequired();

                    b.HasOne("BasicsApi.Models.Power", "IdNavigation")
                        .WithOne("RoleFile")
                        .HasForeignKey("BasicsApi.Models.RoleFile", "Id")
                        .HasConstraintName("FK_ROLE_FIL_ROLE_FILE_POWER")
                        .IsRequired();
                });

            modelBuilder.Entity("BasicsApi.Models.RoleMenu", b =>
                {
                    b.HasOne("BasicsApi.Models.Menu", "Menu")
                        .WithMany("RoleMenu")
                        .HasForeignKey("MenuId")
                        .HasConstraintName("FK_ROLE_MEN_MENU_ROLE_MENU")
                        .IsRequired();

                    b.HasOne("BasicsApi.Models.Power", "Power")
                        .WithMany("RoleMenu")
                        .HasForeignKey("PowerId")
                        .HasConstraintName("FK_ROLE_MEN_ROLE_MENU_POWER")
                        .IsRequired();
                });

            modelBuilder.Entity("BasicsApi.Models.RoleOpretion", b =>
                {
                    b.HasOne("BasicsApi.Models.Operation", "Ope")
                        .WithMany("RoleOpretion")
                        .HasForeignKey("OpeId")
                        .HasConstraintName("FK_ROLE_OPR_OPRETION__OPERATIO")
                        .IsRequired();

                    b.HasOne("BasicsApi.Models.Power", "Power")
                        .WithMany("RoleOpretion")
                        .HasForeignKey("PowerId")
                        .HasConstraintName("FK_ROLE_OPR_ROLE_OPRE_POWER")
                        .IsRequired();
                });

            modelBuilder.Entity("BasicsApi.Models.RolePage", b =>
                {
                    b.HasOne("BasicsApi.Models.Page", "Page")
                        .WithMany("RolePage")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_ROLE_PAG_PAGE_PAGE_PAGE")
                        .IsRequired();

                    b.HasOne("BasicsApi.Models.Power", "Power")
                        .WithMany("RolePage")
                        .HasForeignKey("PowerId")
                        .HasConstraintName("FK_ROLE_PAG_ROLE_PAGE_POWER")
                        .IsRequired();
                });

            modelBuilder.Entity("BasicsApi.Models.RolePower", b =>
                {
                    b.HasOne("BasicsApi.Models.Power", "Power")
                        .WithMany("RolePower")
                        .HasForeignKey("PowerId")
                        .HasConstraintName("FK_ROLE_POW_POWER_ROL_POWER")
                        .IsRequired();

                    b.HasOne("BasicsApi.Models.Role", "Role")
                        .WithMany("RolePower")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_ROLE_POW_ROLE_ROLE_ROLE")
                        .IsRequired();
                });

            modelBuilder.Entity("BasicsApi.Models.Shareholder", b =>
                {
                    b.HasOne("BasicsApi.Models.Company", "C")
                        .WithMany("Shareholder")
                        .HasForeignKey("Cid")
                        .HasConstraintName("FK_SHAREHOL_COMPANY_C_COMPANY");
                });

            modelBuilder.Entity("BasicsApi.Models.UserUsergroup", b =>
                {
                    b.HasOne("BasicsApi.Models.Employee", "Emp")
                        .WithMany("UserUsergroup")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_USER_USE_USER_USER_EMPLOYEE");

                    b.HasOne("BasicsApi.Models.EmpGroup", "Group")
                        .WithMany("UserUsergroup")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_USER_USE_USERGROUP_EMP_GROU")
                        .IsRequired();
                });

            modelBuilder.Entity("BasicsApi.Models.UsergroupRole", b =>
                {
                    b.HasOne("BasicsApi.Models.EmpGroup", "Group")
                        .WithMany("UsergroupRole")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_USERGROU_USERGROUP_EMP_GROU")
                        .IsRequired();

                    b.HasOne("BasicsApi.Models.Role", "Role")
                        .WithMany("UsergroupRole")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_USERGROU_ROLE_GROU_ROLE")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
