<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BasicsApi</name>
    </assembly>
    <members>
        <member name="M:BasicsApi.conmon.LoggerHelper.Info(System.String,System.Exception)">
            <summary>
            普通日志
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:BasicsApi.conmon.LoggerHelper.Warn(System.String,System.Exception)">
            <summary>
            告警日志
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:BasicsApi.conmon.LoggerHelper.Error(System.String,System.Exception)">
            <summary>
            错误日志
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:BasicsApi.conmon.RSAHelper.#ctor(BasicsApi.conmon.RSAType,System.Text.Encoding,System.String,System.String,System.String,System.String)">
            <summary>
            实例化RSAHelper
            </summary>
            <param name="rsaType">加密算法类型 RSA SHA1;RSA2 SHA256 密钥长度至少为2048</param>
            <param name="encoding">编码类型</param>
            <param name="privateKey">私钥</param>
            <param name="publicKey">公钥</param>
        </member>
        <member name="M:BasicsApi.conmon.RSAHelper.Sign(System.String)">
            <summary>
            使用私钥签名
            </summary>
            <param name="data">原始数据</param>
            <returns></returns>
        </member>
        <member name="M:BasicsApi.conmon.RSAHelper.Verify(System.String,System.String)">
            <summary>
            使用公钥验证签名
            </summary>
            <param name="data">原始数据</param>
            <param name="sign">签名</param>
            <returns></returns>
        </member>
        <member name="M:BasicsApi.conmon.RSAHelper.Decrypt(System.String)">
            <summary>
            分段解密
            </summary>
            <param name="cipherText"></param>
            <returns></returns>
        </member>
        <member name="M:BasicsApi.conmon.RSAHelper.AppEncrypt(System.String)">
            <summary>
            分段加密
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:BasicsApi.conmon.RSAHelper.RSAEncrypt(System.String,System.String)">
            <summary>
            RAS加密
            </summary>
            <param name="xmlPublicKey">公钥</param>
            <param name="EncryptString">明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:BasicsApi.conmon.RSAHelper.RSADecrypt(System.String,System.String)">
            <summary>
            RAS解密
            </summary>
            <param name="xmlPrivateKey">私钥</param>
            <param name="DecryptString">密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:BasicsApi.conmon.RSAHelper.RSAKey">
            <summary>
            产生公钥和私钥对
            </summary>
            <returns>string[] 0:私钥;1:公钥</returns>
        </member>
        <member name="T:BasicsApi.conmon.RSAType">
            <summary>
            RSA算法类型
            </summary>
        </member>
        <member name="F:BasicsApi.conmon.RSAType.RSA">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="F:BasicsApi.conmon.RSAType.RSA2">
            <summary>
            RSA2 密钥长度至少为2048
            SHA256
            </summary>
        </member>
        <member name="T:BasicsApi.conmon.WeixiaoAsyncAuthorizationFilterAttribute">
             <summary>
            
             </summary>
        </member>
        <member name="M:BasicsApi.conmon.WeixiaoAsyncAuthorizationFilterAttribute.OnAuthorizationAsync(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)">
             <summary>
            
             </summary>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="T:BasicsApi.Controllers.AreaController">
            <summary>
            地区基础信息管理
            </summary>
        </member>
        <member name="M:BasicsApi.Controllers.AreaController.Area">
            <summary>
            获取地区列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicsApi.Controllers.AreaController.SelectArea">
            <summary>
            获取地区下拉
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicsApi.Controllers.AreaController.GetAreaByIds(System.String)">
            <summary>
            通过地区表Id获取地区
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:BasicsApi.Controllers.UserController">
             <summary>
            
             </summary>
        </member>
        <member name="M:BasicsApi.Controllers.UserController.#ctor(BasicsApi.Models.WeixiaoSysContext,AutoMapper.IMapper,Microsoft.Extensions.Options.IOptions{BasicsApi.JwtSettings},Microsoft.Extensions.Options.IOptions{BasicsApi.RSASettings})">
             <summary>
            
             </summary>
             <param name="db"></param>
             <param name="mapper"></param>
             <param name="_jwtSettingsAccesser"></param>
             <param name="setting"></param>
             <returns></returns>
        </member>
        <member name="P:BasicsApi.Dto.ResponseDto.status">
            <summary>
            状态 0：成功， -1：失败
            </summary>
        </member>
        <member name="P:BasicsApi.Dto.ResponseDto.msg">
            <summary>
            返回消息
            </summary>
        </member>
        <member name="P:BasicsApi.Dto.ResponseDto.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:BasicsApi.Models.FLowGraph.Container">
            <summary>
            图的 DOM 容器，可以传入该 DOM 的 id 或者直接传入容器的 HTML 节点对象
            </summary>
        </member>
        <member name="P:BasicsApi.Models.FLowGraph.Width">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:BasicsApi.Models.FLowGraph.Height">
            <summary>
            高度
            </summary>
        </member>
        <member name="P:BasicsApi.Models.FLowGraph.Renderer">
            <summary>
            默认：canvas 渲染引擎，支持 canvas 和 SVG。
            </summary>
        </member>
        <member name="P:BasicsApi.Models.FLowGraph.FitView">
            <summary>
            是否开启画布自适应
            </summary>
        </member>
        <member name="P:BasicsApi.Models.FLowGraph.FitViewPadding">
            <summary>
            Array | Number
            fitView 为 true 时生效。图适应画布时，指定四周的留白。可以是一个值, 
            例如：fitViewPadding: 20也可以是一个数组，例如：fitViewPadding: [ 20, 40, 50, 20 ]
            当指定一个值时，四边的边距都相等，当指定数组时，数组内数值依次对应 上，右，下，左四边的边距。
            </summary>
        </member>
        <member name="P:BasicsApi.Models.FLowGraph.GroupByTypes">
             <summary>
            默认true, 各种元素是否在一个分组内，决定节点和边的层级问题，默认情况下所有的节点在一个分组中，所有的边在一个分组中，当这个参数为 false 时，节点和边的层级根据生成的顺序确定。
             </summary>
        </member>
        <member name="P:BasicsApi.Models.FLowGraph.GoupType">
            <summary>
            节点分组类型，支持 circle 和 rect
            </summary>
        </member>
        <member name="P:BasicsApi.Models.FLowGraph.AitoPaint">
            <summary>
            默认true 当图中元素更新，或视口变换时，是否自动重绘。建议在批量操作节点时关闭，以提高性能，完成批量操作后再打开，参见后面的 setAutoPaint() 方法。
            </summary>
        </member>
        <member name="P:BasicsApi.Models.FLowGraph.MinZoom">
            <summary>
            最小缩放
            </summary>
        </member>
        <member name="P:BasicsApi.Models.FLowGraph.MaxZoom">
            <summary>
            最大缩放
            </summary>
        </member>
        <member name="M:BasicsApi.Service.AreaService.Areas(System.Nullable{System.Int32})">
            <summary>
            根据id获取它和子树
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BasicsApi.Service.CompanyService.CompanyList(BasicsApi.Dto.CompanyDto)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:BasicsApi.Service.CompanyService.CompanyById(System.Int32)">
             <summary>
            
             </summary>
             <param name="id"></param>
             <returns></returns>
        </member>
        <member name="M:BasicsApi.Service.CompanyService.Companys(System.Nullable{System.Int32})">
            <summary>
            根据id获取它和子树
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BasicsApi.Service.MenuService.MenuList(BasicsApi.Dto.MenuDto)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:BasicsApi.Service.MenuService.MenuById(System.Int32)">
             <summary>
            
             </summary>
             <param name="id"></param>
             <returns></returns>
        </member>
        <member name="M:BasicsApi.Service.MenuService.Menus(System.Nullable{System.Int32})">
            <summary>
            根据id获取它和子树
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
    </members>
</doc>
